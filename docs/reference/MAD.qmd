# MAD { #pyssed.MAD }

```python
MAD(self, bandit, alpha, delta, t_star)
```

A class implementing Liang and Bojinov's Mixture-Adaptive Design (MAD).

## Parameters {.doc-section .doc-section-parameters}

| Name   | Type                       | Description                                                                                                                                                                                                                                                                                                                                                                                                           | Default    |
|--------|----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| bandit | Bandit                     | The underlying bandit algorithm on which the MAD design operates. This bandit class must implement several crucial methods/attributes. For more details on how to create a custom Bandit object, see the documentation of the `pyssed.Bandit` class.                                                                                                                                                                  | _required_ |
| alpha  | float                      | The size of the statistical test (testing for non-zero ATEs).                                                                                                                                                                                                                                                                                                                                                         | _required_ |
| delta  | Callable\[\[int\], float\] | A function that generates the real-valued sequence delta_t in Liang and Bojinov (Definition 4 - Mixture Adaptive Design). This sequence determines the amount of random exploration that is infused into the bandit design, and it should converge to 0 slower than 1/t^(1/4) where t denotes the time step in {0, ... n}. This function should intake an integer (t) and output a float (the corresponding delta_t). | _required_ |
| t_star | int                        | The time-step at which we want to optimize the CSs to be tightest. E.g. Liang and Bojinov set this to the max horizon of their experiment.                                                                                                                                                                                                                                                                            | _required_ |

## Methods

| Name | Description |
| --- | --- |
| [estimates](#pyssed.MAD.estimates) | Extract estimated ATEs and confidence sequences. |
| [fit](#pyssed.MAD.fit) | Fit the MAD algorithm for the full time horizon. |
| [plot_ate](#pyssed.MAD.plot_ate) | Plot the ATE and CS paths for each arm of the experiment. |
| [plot_n](#pyssed.MAD.plot_n) | Plot the total N assigned to each arm. |
| [plot_sample_assignment](#pyssed.MAD.plot_sample_assignment) | Plot sample assignment to arms across time |
| [pull](#pyssed.MAD.pull) | Perform one full iteration of the MAD algorithm. |
| [summary](#pyssed.MAD.summary) | Print a summary of ATEs and confidence bands. |

### estimates { #pyssed.MAD.estimates }

```python
MAD.estimates()
```

Extract estimated ATEs and confidence sequences.

#### Returns {.doc-section .doc-section-returns}

| Name   | Type             | Description                                                               |
|--------|------------------|---------------------------------------------------------------------------|
|        | pandas.DataFrame | A dataframe of ATE estimates and corresponding CS lower and upper bounds. |

### fit { #pyssed.MAD.fit }

```python
MAD.fit(verbose=True)
```

Fit the MAD algorithm for the full time horizon.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type   | Description                                | Default   |
|---------|--------|--------------------------------------------|-----------|
| verbose | bool   | Whether to print progress of the algorithm | `True`    |

#### Returns {.doc-section .doc-section-returns}

| Name   | Type   | Description   |
|--------|--------|---------------|
|        | None   |               |

### plot_ate { #pyssed.MAD.plot_ate }

```python
MAD.plot_ate()
```

Plot the ATE and CS paths for each arm of the experiment.

#### Returns {.doc-section .doc-section-returns}

| Name   | Type            | Description   |
|--------|-----------------|---------------|
|        | plotnine.ggplot |               |

### plot_n { #pyssed.MAD.plot_n }

```python
MAD.plot_n()
```

Plot the total N assigned to each arm.

#### Returns {.doc-section .doc-section-returns}

| Name   | Type            | Description   |
|--------|-----------------|---------------|
|        | plotnine.ggplot |               |

### plot_sample_assignment { #pyssed.MAD.plot_sample_assignment }

```python
MAD.plot_sample_assignment()
```

Plot sample assignment to arms across time

#### Returns {.doc-section .doc-section-returns}

| Name   | Type            | Description   |
|--------|-----------------|---------------|
|        | plotnine.ggplot |               |

### pull { #pyssed.MAD.pull }

```python
MAD.pull()
```

Perform one full iteration of the MAD algorithm.

#### Returns {.doc-section .doc-section-returns}

| Name   | Type   | Description   |
|--------|--------|---------------|
|        | None   |               |

### summary { #pyssed.MAD.summary }

```python
MAD.summary()
```

Print a summary of ATEs and confidence bands.

#### Returns {.doc-section .doc-section-returns}

| Name   | Type   | Description   |
|--------|--------|---------------|
|        | None   |               |